#!/bin/bash

export PATH=/usr/local/bin:/usr/bin:/bin
export AWS_ACCESS_KEY_ID='{{ pg_dump_backup_aws_access_key_id }}'
export AWS_SECRET_ACCESS_KEY='{{ pg_dump_backup_aws_secret_access_key }}'
export BUCKET='{{ pg_dump_backup_aws_s3_bucket }}'
export DATABASE='{{ pg_dump_backup_database_name }}'

profiles=`aws s3 ls --human-readable "s3://${BUCKET}"`
if [ $? -ne 0 ]; then
    echo "Error listing profiles on S3"
    exit 1
fi

available_profiles=()
while read -r line
do
    if [[ "$line" =~ ^(PRE )(.+)/ ]]; then
        profile=${BASH_REMATCH[2]}
        available_profiles+=("$profile")
    fi
done <<< "$profiles"

echo "Backup profiles available:"
PS3="Choose a backup profile. Enter a number above: "
select selected_profile in "${available_profiles[@]}";
do
    if [ -z "${selected_profile}" ]; then
        echo "Invalid option: ${REPLY}. Please try another one..."
    else
        break
    fi
done

backups=`aws s3 ls --human-readable "s3://${BUCKET}/${selected_profile}/"`
if [ $? -ne 0 ]; then
    echo "Error listing backups on S3"
    exit 1
fi

available_backups=()
while read -r line
do
    if [[ "$line" =~ ^(.{20})[[:blank:]]+([0-9.]+[[:blank:]]+[[:alpha:]]+)[[:blank:]]+(.+) ]]; then
        size=${BASH_REMATCH[2]}
        filename=${BASH_REMATCH[3]}
        available_backups+=("$filename $size")
    fi
done <<< "$backups"

echo "Backups available in ${selected_profile}:"
PS3="Choose a backup file to restore. Enter a number above: "
select selected_file_option in "${available_backups[@]}";
do
    if [ -z "${selected_file_option}" ]; then
        echo "Invalid option: ${REPLY}. Please try another one..."
    else
        break
    fi
done

selected_file_array=($selected_file_option)
selected_file=${selected_file_array[0]}

start=`date +%s`

aws s3 cp "s3://${BUCKET}/${selected_profile}/${selected_file}" "/tmp/${selected_file}"
if [ $? -ne 0 ]; then
    echo "Error downloading backup from S3"
    exit 1
fi

pushd /tmp

sudo -u postgres psql postgres -c "DROP DATABASE ${DATABASE}"
if [ $? -ne 0 ]; then
    echo "DROP DATABASE failed. Continuing... (not critical)"
fi

sudo -u postgres psql postgres -c "CREATE DATABASE ${DATABASE}"
if [ $? -ne 0 ]; then
    echo "CREATE DATABASE failed."
    exit 1
fi

sudo -u postgres sh -c "zcat /tmp/${selected_file} | pg_restore -v --dbname=${DATABASE}"
if [ $? -ne 0 ]; then
    echo "pg_restore failed."
    exit 1
fi

end=`date +%s`
runtime=$((end-start))

echo "Complete!"
echo "Restore took ${runtime} seconds with download and import."

rm "/tmp/${selected_file}"
if [ $? -ne 0 ]; then
    echo "Failed to remove temp dump."
    exit 1
fi

exit 0

- name: deploy <TODO:app_name>
  description: ''
  group: production
  executionEnabled: true
  loglevel: INFO
  options:
  - description: Branch, Commit SHA, or tag
    name: version
    required: true
    value: production
  - name: ansible-vault-password
    secure: true
    storagePath: keys/clients/<TODO:project_full_name>/ansible-vault-production
    valueExposed: true
  scheduleEnabled: false
  sequence:
    commands:
    - description: Clone playbooks
      interpreterArgsQuoted: false
      script: |-
        rm -rf "/@job.project@-@job.id@-playbooks"
        git clone git@bitbucket.org:silverlogic/<TODO:project_code_name>-ansible.git "@job.project@-@job.id@-playbooks"
      scriptInterpreter: bash
    - description: Install ansible
      interpreterArgsQuoted: false
      script: |-
        cd "@job.project@-@job.id@-playbooks"
        virtualenv -p /usr/bin/python venv
        source venv/bin/activate
        pip install -U pip setuptools wheel
        pip install --use-wheel --find-links=../wheelhouse -r requirements.txt
      scriptInterpreter: bash
    - description: Install playbook requirements.yml
      interpreterArgsQuoted: false
      script: |-
        cd "@job.project@-@job.id@-playbooks"
        source venv/bin/activate
        ansible-galaxy install -r requirements.yml
      scriptInterpreter: bash
    - description: create vault password file
      interpreterArgsQuoted: false
      script: |-
        cd "@job.project@-@job.id@-playbooks"
        echo "$RD_OPTION_ANSIBLE_VAULT_PASSWORD" > vault-password
      scriptInterpreter: bash
    - description: Run the playbook
      interpreterArgsQuoted: false
      script: |-
        cd "@job.project@-@job.id@-playbooks"
        source venv/bin/activate
        cd "apps/<TODO:app_name>"
        export ANSIBLE_HOST_KEY_CHECKING=False
        eval $(ssh-agent)
        ansible-playbook config_all.yml -i environments/production -t deploy -e "app_version=@option.version@" --vault-id="../../vault-password"
      scriptInterpreter: bash
    - description: Clean up playbooks
      script: rm -rf "@job.project@-@job.id@-playbooks"
    keepgoing: true
    strategy: node-first
  # notification:
  #   onfailure:
  #     plugin:
  #       configuration:
  #         webhook_url: <TODO:slack_webhook_url>
  #       type: SlackNotification
  #   onsuccess:
  #     plugin:
  #       configuration:
  #         webhook_url: <TODO:slack_webhook_url>
  #       type: SlackNotification
